# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2
jobs:
  lint-vet-fmt:
    docker:
      - image: golang:1.11
    working_directory: /usr/local/go/src/go.mozilla.org/autograph
    steps:
      - checkout
      - run:
          name: run golint
          command: make install-golint lint || true
      - run:
          name: run gofmt
          command: |
            make -s fmt-diff | tee fmt.diff
            test -z "$(cat fmt.diff)"
      - run:
          name: install packages for crypto11 headers for go vet
          command: |
            apt-get update
            apt-get install -y libltdl-dev
      - run:
          name: run go vet
          command: make vet

  unit-test:
    docker:
      - image: circleci/golang:1.11
      - image: circleci/postgres:11
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: autograph
    working_directory: /go/src/go.mozilla.org/autograph
    environment:
      GOPATH: "/go"
    steps:
      - checkout
      - run:
          name: Install packages
          command: |
            sudo apt-get -y install libltdl-dev gpg postgresql-client
            make install-goveralls install-cover
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Configure database
          command: |
            psql -U root -d autograph -h localhost -p 5432 -f database/schema.sql
      - run:
          name: Run a dummy statsd in the background
          command: make dummy-statsd
          background: true
      - run:
          name: Run unit tests
          command: |
            make test
      - run:
          name: Report coverage
          command: |
            cd $GOPATH/src/go.mozilla.org/autograph
            $GOPATH/bin/goveralls -coverprofile=coverage.out -service circle-ci

  build:
    # based on the official golang image with more docker stuff
    docker:
      - image: circleci/golang:1.11.4
    working_directory: /go/src/go.mozilla.org/autograph
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: create version.json and other autogenerated files
          command: make generate
      - run:
          name: build docker images
          command: make build-app-container build-monitor-container build-softhsm-container
      # save the built docker container to CircleCI's cache since
      # CircleCI Workflows do not have the same remote docker
      # instance.
      #
      # Use /go/src/app since we don't have permissions to make
      # directories in other locations
      - run:
          name: docker save built images
          no_output_timeout: 30m
          command: |
            mkdir -p /go/src/app/cache
            docker save "autograph-app" "autograph-monitor" "autograph-app-hsm" | gzip -c > /go/src/app/cache/docker.tgz
      - save_cache:
          key: v4-{{ .Branch }}-{{ epoch }}
          paths:
            - /go/src/app/cache/docker.tgz

  integrationtest:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v4-{{ .Branch }}
      - run:
          name: Restore Docker image cache
          command: |
            gunzip -c /go/src/app/cache/docker.tgz | docker load

      - run:
          name: Start autograph stack with docker-compose
          command: |
            docker-compose up -d
          background: true

      - run:
          name: wait for apps to run
          command: |
            while test "true" != "$(docker inspect -f {{.State.Running}} autograph-app)"; do
              echo -n "."
              sleep 1 # wait before checking again
            done
            while test "true" != "$(docker inspect -f {{.State.Running}} autograph-app-hsm)"; do
              echo -n "."
              sleep 1 # wait before checking again
            done
            sleep 10  # wait for servers to listen and monitoring to start

      - run:
          name: check monitoring works
          command: |
            if [ "true" != "$(docker inspect -f {{.State.Running}} autograph-monitor)" ]; then \
              echo "Monitor is failing"; exit 1; fi
            if [ "true" != "$(docker inspect -f {{.State.Running}} autograph-monitor-hsm)" ]; then \
              echo "Monitor is failing"; exit 1; fi

      - run:
          name: check XPI signing works against Autograph
          command: |
            docker run --rm --name autograph-sign-xpi-test --network project_default --user 0 \
            --workdir /go/src/go.mozilla.org/autograph/tools/autograph-client autograph-app /bin/bash \
            -c \
            "wget https://addons.mozilla.org/firefox/downloads/file/935711/pomodoro_clock-1.1.1-an+fx-windows.xpi && \

            SIGNER_ID=webextensions-rsa \
            TRUST_ROOTS=dev-webext-rsa-root.pem \
            TARGET="http://autograph-app:8000" \
            ./build_test_xpis.sh \
            pomodoro_clock-1.1.1-an+fx-windows.xpi && \

            SIGNER_ID=extensions-ecdsa \
            TRUST_ROOTS=dev-ext-ecdsa-root.pem \
            TARGET="http://autograph-app:8000" \
            ./build_test_xpis.sh \
            pomodoro_clock-1.1.1-an+fx-windows.xpi"

      - run:
          name: check XPI signing works against Autograph HSM
          command: |
            docker run --rm --name autograph-sign-xpi-test-hsm --network project_default --user 0 \
            --workdir /go/src/go.mozilla.org/autograph/tools/autograph-client autograph-app-hsm /bin/bash \
            -c 'wget https://addons.mozilla.org/firefox/downloads/file/935711/pomodoro_clock-1.1.1-an+fx-windows.xpi && \

            SIGNER_ID=hsm-webextensions-rsa \
            TRUST_ROOTS=dev-webext-rsa-root.pem \
            TARGET="http://autograph-app-hsm:8001" \
            ./build_test_xpis.sh \
            pomodoro_clock-1.1.1-an+fx-windows.xpi && \

            SIGNER_ID=hsm-extensions-ecdsa \
            TRUST_ROOTS=dev-ext-ecdsa-root.pem \
            TARGET="http://autograph-app-hsm:8001" \
            ./build_test_xpis.sh \
            pomodoro_clock-1.1.1-an+fx-windows.xpi'

      - run:
          name: check APK signing works against Autograph
          command: |
            # TODO: HSM support for APK signing keys and test here
            docker run --name autograph-sign-apk-test --network project_default --user 0 \
            --workdir /go/src/go.mozilla.org/autograph/tools/autograph-client autograph-app \
            /bin/bash -c "TARGET="http://autograph-app:8000" ./build_test_apks.sh"

            docker cp \
            autograph-sign-apk-test:/go/src/go.mozilla.org/autograph/tools/autograph-client/resigned-apks.tgz \
            /go/src/app/cache/

            docker stop autograph-sign-apk-test || true
            docker rm -f autograph-sign-apk-test || true
            chmod -R 777 /go/src/app/cache/
            ls -lh /go/src/app/cache/

      - save_cache:
          key: v4-apk-{{ .Branch }}-{{ .Revision }}
          paths:
            - /go/src/app/cache/resigned-apks.tgz

  verify:
    working_directory: ~/
    docker:
      - image: circleci/android:api-25-alpha
        user: root
    steps:
      - restore_cache:
          key: v4-apk-{{ .Branch }}-{{ .Revision }}
      - run:
          name: install android SDK
          command: |
            sudo apt update
            sudo apt install -y android-sdk-build-tools
      - run:
          name: Verify APKs
          command: |
            ls -lh /go/src/app/cache/
            cd /tmp/
            tar xvzf /go/src/app/cache/resigned-apks.tgz
            for apk in $(ls *.resigned.apk); do
                /opt/android/sdk/build-tools/27.0.3/apksigner verify --verbose $apk
            done

  deploy:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v4-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: gunzip -c /go/src/app/cache/docker.tgz | docker load

      - run:
          name: Deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag autograph-app ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag autograph-app "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  check-code-quality:
    jobs:
      - lint-vet-fmt:
          filters:
            tags:
              only: /.*/

      - unit-test:
          filters:
            tags:
              only: /.*/

  build-integrationtest-verify-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - integrationtest:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - verify:
          requires:
            - build
            - integrationtest
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - build
            - integrationtest
            - verify
          filters:
            tags:
              # only upload the docker container on semver tags
              only: /[0-9]\.[0-9]\.[0-9]/
            branches:
              only: master
